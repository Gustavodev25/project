const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function identifyAffectedOrders() {
  console.log('=== IDENTIFICANDO VENDAS AFETADAS PELA CORRE√á√ÉO ===\n');

  const vendas = await prisma.meliVenda.findMany({
    where: {
      OR: [
        { logisticType: 'Ag√™ncia' },
        { logisticType: 'Coleta' },
        { logisticType: 'xd_drop_off' },
        { logisticType: 'cross_docking' }
      ],
      unitario: { gte: 79 }
    },
    orderBy: { dataVenda: 'desc' }
  });

  console.log(`Total de vendas Ag√™ncia/Coleta com unit√°rio >= R$79: ${vendas.length}\n`);

  const affected = [];

  for (const venda of vendas) {
    if (!venda.rawData || typeof venda.rawData !== 'object' || !venda.rawData.freight) {
      continue;
    }

    const freight = venda.rawData.freight;
    const listCost = freight.listCost ?? 0;
    const baseCost = freight.baseCost ?? 0;
    const frete = parseFloat(venda.frete);

    // Verifica se √© um caso onde listCost √© 0/null mas baseCost tem valor
    // Nesse caso, a corre√ß√£o vai usar baseCost como fallback
    if ((listCost === null || listCost === 0) && baseCost !== null && baseCost !== 0) {
      affected.push({
        orderId: venda.orderId,
        tipo: venda.logisticType,
        unitario: parseFloat(venda.unitario),
        freteAtual: frete,
        listCost,
        baseCost,
        freteNovo: -baseCost  // Ser√° -baseCost ap√≥s corre√ß√£o
      });
    }
  }

  console.log(`\nüìä VENDAS QUE SER√ÉO AFETADAS PELA CORRE√á√ÉO: ${affected.length}\n`);

  if (affected.length > 0) {
    console.log('Lista de vendas que ter√£o o frete recalculado:\n');
    affected.slice(0, 20).forEach(v => {
      console.log(`Order ID: ${v.orderId}`);
      console.log(`  Tipo: ${v.tipo}`);
      console.log(`  Unit√°rio: R$ ${v.unitario.toFixed(2)}`);
      console.log(`  Frete Atual: R$ ${v.freteAtual.toFixed(2)}`);
      console.log(`  Frete Novo (estimado): R$ ${v.freteNovo.toFixed(2)}`);
      console.log(`  baseCost usado: R$ ${v.baseCost.toFixed(2)}`);
      console.log('');
    });

    if (affected.length > 20) {
      console.log(`... e mais ${affected.length - 20} vendas\n`);
    }
  } else {
    console.log('‚úÖ Nenhuma venda ser√° afetada pela corre√ß√£o.');
    console.log('Isso significa que as vendas atuais j√° est√£o corretas ou n√£o h√° casos');
    console.log('onde listCost est√° zerado mas baseCost tem valor.\n');
  }

  console.log('\n=== PR√ìXIMOS PASSOS ===');
  if (affected.length > 0) {
    console.log('Para aplicar a corre√ß√£o, voc√™ precisa ressincronizar essas vendas.');
    console.log('Isso pode ser feito atrav√©s do modal de sincroniza√ß√£o no sistema.');
  } else {
    console.log('A corre√ß√£o est√° implementada e funcionar√° para futuras vendas.');
    console.log('N√£o √© necess√°rio ressincronizar vendas existentes.');
  }
}

identifyAffectedOrders()
  .then(() => {
    console.log('\n‚úÖ An√°lise conclu√≠da');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Erro:', error);
    process.exit(1);
  });
